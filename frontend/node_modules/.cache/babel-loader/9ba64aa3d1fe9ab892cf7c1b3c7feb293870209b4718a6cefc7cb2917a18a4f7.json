{"ast":null,"code":"// import * as Actions from \"./actions\";\n// import initialState from \"../store/initialState\";\n\n// export const UserReducer = (state = initialState.user, action) => {\n//   switch (action.type) {\n//     case Actions.SIGN_UP:\n//     case Actions.SIGN_IN:\n//     case Actions.SIGN_USER_STORE:\n//       return {\n//         ...state,\n//         ...action.payload.user,\n//         errors: {}, // clear errors on success\n//       };\n\n//     case Actions.SIGN_UP_ERROR:\n//     case Actions.SIGN_IN_ERROR:\n//       return {\n//         ...state,\n//         errors: normalizeErrors(action.payload.errors),\n//       };\n\n//     case Actions.SIGN_OUT:\n//       return {\n//         ...initialState.user,\n//       };\n\n//     case Actions.CLEAR_ERRORS:\n//       return {\n//         ...state,\n//         errors: {},\n//       };\n\n//     default:\n//       return state;\n//   }\n// };\n\n// function normalizeErrors(errors) {\n//   if (!errors || typeof errors !== \"object\") {\n//     return { error: [\"An unexpected error occurred.\"] };\n//   }\n\n//   const normalized = {};\n\n//   if (errors.email) {\n//     normalized.email = Array.isArray(errors.email) ? errors.email : [errors.email];\n//   }\n\n//   if (errors.password) {\n//     normalized.password = Array.isArray(errors.password) ? errors.password : [errors.password];\n//   }\n\n//   if (errors.password_confirm) {\n//     normalized.password_confirm = Array.isArray(errors.password_confirm)\n//       ? errors.password_confirm\n//       : [errors.password_confirm];\n//   }\n\n//   if (errors.message || errors.detail) {\n//     normalized.error = [errors.message || errors.detail];\n//   }\n\n//   return normalized;\n// }","map":{"version":3,"names":[],"sources":["D:/django projects/hivetechwear/frontend/src/reducks/users/reducers.js"],"sourcesContent":["// import * as Actions from \"./actions\";\r\n// import initialState from \"../store/initialState\";\r\n\r\n// export const UserReducer = (state = initialState.user, action) => {\r\n//   switch (action.type) {\r\n//     case Actions.SIGN_UP:\r\n//     case Actions.SIGN_IN:\r\n//     case Actions.SIGN_USER_STORE:\r\n//       return {\r\n//         ...state,\r\n//         ...action.payload.user,\r\n//         errors: {}, // clear errors on success\r\n//       };\r\n\r\n//     case Actions.SIGN_UP_ERROR:\r\n//     case Actions.SIGN_IN_ERROR:\r\n//       return {\r\n//         ...state,\r\n//         errors: normalizeErrors(action.payload.errors),\r\n//       };\r\n\r\n//     case Actions.SIGN_OUT:\r\n//       return {\r\n//         ...initialState.user,\r\n//       };\r\n\r\n//     case Actions.CLEAR_ERRORS:\r\n//       return {\r\n//         ...state,\r\n//         errors: {},\r\n//       };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// function normalizeErrors(errors) {\r\n//   if (!errors || typeof errors !== \"object\") {\r\n//     return { error: [\"An unexpected error occurred.\"] };\r\n//   }\r\n\r\n//   const normalized = {};\r\n\r\n//   if (errors.email) {\r\n//     normalized.email = Array.isArray(errors.email) ? errors.email : [errors.email];\r\n//   }\r\n\r\n//   if (errors.password) {\r\n//     normalized.password = Array.isArray(errors.password) ? errors.password : [errors.password];\r\n//   }\r\n\r\n//   if (errors.password_confirm) {\r\n//     normalized.password_confirm = Array.isArray(errors.password_confirm)\r\n//       ? errors.password_confirm\r\n//       : [errors.password_confirm];\r\n//   }\r\n\r\n//   if (errors.message || errors.detail) {\r\n//     normalized.error = [errors.message || errors.detail];\r\n//   }\r\n\r\n//   return normalized;\r\n// }\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}